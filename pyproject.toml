[tool.poetry]
name = "pythonProject"
version = "0.1.0"
description = "TZ"
authors = ["Елизавета Кочергина <kochergina625@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.105.0"
aiogram = "^3.2.0"
uvicorn = "^0.24.0.post1"
fastapi-users-db-sqlalchemy = "^6.0.1"
alembic = "^1.13.0"
pydantic-settings = "^2.1.0"
sqlalchemy = "^2.0.23"
aiosqlite = "^0.19.0"
setuptools = "^69.0.2"
asyncpg = "^0.29.0"
alembic-postgresql-enum = "^1.0.0"
aiohttp = "^3.9.4"
fastapi-filter = "^1.0.0"
aio-pika = "^9.3.1"
rabbitmq = "^0.2.0"
multidict = "5.1.0"
bcrypt = "^4.1.2"


[tool.poetry.group.dev.dependencies]
ruff = "^0.1.8"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
select = [
    "ARG",    # flake8-unused-arguments, https://beta.ruff.rs/docs/rules/#flake8-unused-arguments-arg
    "B",      # flake8-bugbear, https://beta.ruff.rs/docs/rules/#flake8-bugbear-b
    "BLE",    # flake8-blind-except, https://beta.ruff.rs/docs/rules/#flake8-blind-except-ble
    "C90",    # mccabe, https://beta.ruff.rs/docs/rules/#mccabe-c90
    "COM",    # flake8-commas, https://beta.ruff.rs/docs/rules/#flake8-commas-com
    "D",      # pydocstyle, https://beta.ruff.rs/docs/rules/#pydocstyle-d
    "DJ",     # flake8-django, https://beta.ruff.rs/docs/rules/#flake8-django-dj
    "DTZ",    # flake8-datetimez, https://beta.ruff.rs/docs/rules/#flake8-datetimez-dtz
    "E",      # pycodestyle-error, https://beta.ruff.rs/docs/rules/#pycodestyle-e-w
    "EM",     # flake8-errmsg, https://beta.ruff.rs/docs/rules/#flake8-errmsg-em
    "ERA",    # eradicate, https://beta.ruff.rs/docs/rules/#eradicate-era
    "EXE",    # flake8-executable, https://beta.ruff.rs/docs/rules/#flake8-executable-exe
    "F",      # pyflakes, https://beta.ruff.rs/docs/rules/#pyflakes-f
    "FLY",    # flynt, https://beta.ruff.rs/docs/rules/#flynt-fly
    "G",      # flake8-logging-format, https://beta.ruff.rs/docs/rules/#flake8-logging-format-g
    "I",      # isort, https://beta.ruff.rs/docs/rules/#isort-i
    "ICN",    # flake8-import-conventions, https://beta.ruff.rs/docs/rules/#flake8-import-conventions-icn
    "INT",    # flake8-gettext, https://beta.ruff.rs/docs/rules/#flake8-gettext-int
    "ISC",    # flake8-implicit-str-concat, https://beta.ruff.rs/docs/rules/#flake8-implicit-str-concat-isc
    "N",      # pep8-naming, https://beta.ruff.rs/docs/rules/#pep8-naming-n
    "PGH",    # pygrep-hooks, https://beta.ruff.rs/docs/rules/#pygrep-hooks-pgh
    "PIE",    # flake8-pie, https://beta.ruff.rs/docs/rules/#flake8-pie-pie
    "PLE",    # pylint-error, https://beta.ruff.rs/docs/rules/#error-ple
    "PLW",    # pylint-warning, https://beta.ruff.rs/docs/rules/#warning-plw
    "PT",     # flake8-pytest-style, https://beta.ruff.rs/docs/rules/#flake8-pytest-style-pt
    "PTH",    # flake8-use-pathlib, https://beta.ruff.rs/docs/rules/#flake8-use-pathlib-pth
    "PYI",    # flake8-pyi, https://beta.ruff.rs/docs/rules/#flake8-pyi-pyi
    "Q",      # flake8-quotes, https://beta.ruff.rs/docs/rules/#flake8-quotes-q
    "RSE",    # flake8-raise, https://beta.ruff.rs/docs/rules/#flake8-raise-rse
    "S",      # flake8-bandit, https://beta.ruff.rs/docs/rules/#flake8-bandit-s
    "SLF",    # flake8-self, https://beta.ruff.rs/docs/rules/#flake8-self-slf
    "T10",    # flake8-debugger, https://beta.ruff.rs/docs/rules/#flake8-debugger-t10
    "T20",    # flake8-print, https://beta.ruff.rs/docs/rules/#flake8-print-t20
    "TCH",    # flake8-type-checking, https://beta.ruff.rs/docs/rules/#flake8-type-checking-tch
    "TD",     # flake8-todos, https://beta.ruff.rs/docs/rules/#flake8-todos-td
    "TID",    # flake8-tidy-imports, https://beta.ruff.rs/docs/rules/#flake8-tidy-imports-tid
    "TRY",    # tryceratops, https://beta.ruff.rs/docs/rules/#tryceratops-try
    "UP",     # pyupgrade, https://beta.ruff.rs/docs/rules/#pyupgrade-up
    "W",      # pycodestyle-warning, https://beta.ruff.rs/docs/rules/#pycodestyle-e-w
    "YTT",    # flake8-2020, https://beta.ruff.rs/docs/rules/#flake8-2020-ytt
]
ignore = [
    "ANN201", # missing return type annotation for public function
    "ANN101", # missing type annotation for __ in method
    "ANN001", # missing type annotation for function argument
    "D100",   # missing docstring in public module
    "D101",   # missing docstring in public class FOR DEV
    "D102",   # missing docstring in public method
    "D104",   # missing docstring in public package
    "D203",   # 1 blank line required before class docstring
    "D213",   # multi-line docstring summary should start at the second line,
    "PGH004",  #  Use specific rule codes when using `noqa`
    "B008",  # Do not perform function calls in argument defaults.
    "FA100",  #  Use `from __future__ import annotations` to get proper type inference for forward references.
    "D103"  # временно
]
target-version = "py39"

exclude = ['alembic']

line-length = 79

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "single"
